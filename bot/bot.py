# -*- coding: utf-8 -*-
from django.contrib import admin
import telebot
from telebot import types
import tg_analytic
from telebot.types import InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from db import *
import time


TOKEN = "TG_TOKEN"
bot = telebot.TeleBot(TOKEN, parse_mode=None)

admins = [361637610] # id of admin

media_path = "../filmsBot/media/"
code = "üîê –ö–æ–¥ üîê"
random = "üîÄ –†–∞–Ω–¥–æ–º üîÄ"
recommendation = "üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üìå"
search = "üîé –ü–æ–∏—Å–∫ üîç"
welcome = ". –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä. –ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ñ–∏–ª—å–º —Å –Ω–∞—à–µ–≥–æ __TikTok__ —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *" + code + "* –∏ –≤–≤–µ–¥–∏ –µ–≥–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–∫—Ç–æ–∫–∞. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–º–∏ *" + random + "* –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ *" + recommendation +"* –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º –ø–æ –∂–∞—Ä–Ω—É –∏–ª–∏ –∏—â–∏ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É *" + search + "*. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤–≤–µ–¥–∏ /help."
help = "–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ñ–∏–ª—å–º —Å –Ω–∞—à–µ–≥–æ __Tiktok__ —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *" + code + "* –∏ –≤–≤–µ–¥–∏ –µ–≥–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è TikTok-a. –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–º–∏ *" + random + "* –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ *" + recommendation +"* –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º –ø–æ –∂–∞—Ä–Ω—É –∏–ª–∏ –∏—â–∏ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É *" + search + "*."


def gen_markup():
    markup = types.ReplyKeyboardMarkup()
    markup.row_width = 1
    markup.add(KeyboardButton(code),
    KeyboardButton(random),
    KeyboardButton(recommendation),
    KeyboardButton(search))
    return markup


def gen_link(link):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º üé•", url=link))
    return markup


def gen_link_ad(link):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ üîó", url=link))
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    tg_analytic.statistics(message.chat.id, message.text)
    name = message.from_user.first_name
    initiate_user_start(message.from_user, message.chat.id)
    photo = open('how_to.png', 'rb')
    bot.send_photo(message.chat.id, photo, "–ü—Ä–∏–≤–µ—Ç, " + name + welcome, parse_mode='Markdown', reply_markup=gen_markup())
    photo.close()


@bot.message_handler(commands=['help'])
def send_help(message):
    tg_analytic.statistics(message.chat.id, message.text)
    update_last_day_active(message.from_user.id, message.chat.id)
    photo = open('how_to.png', 'rb')
    bot.send_photo(message.chat.id, photo, help, parse_mode='Markdown', reply_markup=gen_markup())
    photo.close()


@bot.message_handler(commands=['send_ad'])
def newsletter(message):
    if message.from_user.id in admins:
        users = get_all_users()
        count = 0
        for i, user in enumerate(users):
            try:
                send_newsletter_ad(user[0])
                count += 1
            except Exception as e:
                bot.send_message(message.from_user.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É " + str(user[0]))
                print(e)
            if i % 20 == 0:
                time.sleep(1)
        bot.send_message(message.from_user.id, "–ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ " + str(count) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")


@bot.message_handler(commands=['send_mess'])
def send_mess(message):
    if message.from_user.id in admins:
        s = message.text.split(' ')
        text = ''
        sent = False
        for i in range(2, len(s)):
            text += s[i] + ' '
        try:
            bot.send_message(int(s[1]), text, parse_mode='Markdown', reply_markup=gen_markup())
            sent = True
        except Exception as e:
            bot.send_message(message.from_user.id, "–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        if sent:
            bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ " + text)


@bot.message_handler(func=lambda m:True)
def main_menu(message):
    tg_analytic.statistics(message.chat.id, message.text)
    update_last_day_active(message.from_user.id, message.chat.id)
    if message.text[:10] == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == 'C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        st = message.text.split(' ')
        if 'txt' in st or '—Ç—Ö—Ç' in st:
            tg_analytic.analysis(st,message.chat.id)
            with open('%s.txt' %message.chat.id ,'r',encoding='UTF-8') as file:
                bot.send_document(message.chat.id,file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(st,message.chat.id)
            bot.send_message(message.chat.id, messages)
    elif message.text.isdigit():
        info = None
        if message.text.isdigit():
            info = get_film_by_code_from_db(int(message.text))
        send_film(message, info)
    elif message.text[:3] == "–ö–æ–¥" or message.text[:3] == "–∫–æ–¥":
        text = message.text.split(' ')
        if len(text) > 1:
            if text[1].isdigit():
                info = None
                info = get_film_by_code_from_db(int(text[1]))
                send_film(message, info)
        else:
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∫–æ–¥ –∏ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ!")
    elif message.text == code:
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞ —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –≤ TikTok.", reply_markup=gen_markup())
        bot.register_next_step_handler(msg, find_film_by_code)
    elif message.text == random:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –≤—ã–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º.")
        info = get_random_film_from_db()
        send_film(message, info)
    elif message.text == recommendation:
        genre_markup = ReplyKeyboardMarkup()
        genre_markup.row_width = 1
        genres = get_all_genres()
        for gen in genres:
            genre_markup.add(gen[1])
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=genre_markup)
        bot.register_next_step_handler(msg, find_film_by_genre)
    elif message.text == search:
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
        bot.register_next_step_handler(msg, search_film_by_name)
    else:
        bot.send_message(message.chat.id, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É!", reply_markup=gen_markup())


def find_film_by_code(message):
    info = None
    tg_analytic.statistics(message.chat.id, message.text)
    if message.text.isdigit():
        info = get_film_by_code_from_db(int(message.text))
    send_film(message, info)
    

def find_film_by_genre(message):
    tg_analytic.statistics(message.chat.id, message.text)
    info = get_random_film_by_genre_from_db(message.text)
    send_film(message, info)


def search_film_by_name(message):
    tg_analytic.statistics(message.chat.id, message.text)
    info = get_film_by_name(message.text)
    send_list_of_films(message, info)


def send_ad(id):
    info = get_random_ad_from_db()
    if info != None:
        text = '*'+info[1]+'*\n'+info[2]
        if info[5] != '':
            video = open(media_path+info[5], 'rb')
            bot.send_video(id, video)
            bot.send_message(id, text, parse_mode='Markdown', reply_markup=gen_link_ad(info[3]))
            video.close()
        else:
            photo = open(media_path+info[4], 'rb')
            bot.send_photo(id, photo, text, parse_mode='Markdown', reply_markup=gen_link_ad(info[3]))
            photo.close()


def send_newsletter_ad(id):
    info = get_last_ad_from_db()
    if info != None:
        text = '*'+info[1]+'*\n'+info[2]
        if info[5] != '':
            video = open(media_path+info[5], 'rb')
            bot.send_video(id, video)
            bot.send_message(id, text, parse_mode='Markdown', reply_markup=gen_link_ad(info[3]))
            video.close()
        else:
            photo = open(media_path+info[4], 'rb')
            bot.send_photo(id, photo, text, parse_mode='Markdown', reply_markup=gen_link_ad(info[3]))
            photo.close()


def send_list_of_films(message, info):
    if info == [] or info == None:
        bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞. –ü—Ä–æ—Å—Ç–∏ üòî")
    else:
        text_message = ''
        for el in info:
            text_message += "*" + el[1] + "* (" + str(el[3]) + ')' + " - üîê –ö–æ–¥ üîê - *" + str(el[0]) + "*\n"
        text_message += "\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞–∂–º–∏ *–ö–æ–¥* –∏ –≤–≤–µ–¥–∏ —Ç–æ—Ç —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞."
        bot.send_message(message.chat.id, text_message, parse_mode='Markdown', reply_markup=gen_markup())


def send_film(message, info):
    if info == None or info == []:
        bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞. –ü—Ä–æ—Å—Ç–∏ üòî", reply_markup=gen_markup())
    else:
        send_ad(message.chat.id)
        photo = open(media_path+info[7], 'rb')
        text_message = '*' + info[1] + '*' + "\n" + "üìà *–†—ç–π—Ç–∏–Ω–≥*: " + str(info[6]) + "\nüóì *–ì–æ–¥*: " + str(info[3]) + "\n" + info[2]
        bot.send_photo(message.chat.id, photo, text_message, parse_mode='Markdown', reply_markup=gen_link(info[5]))
        photo.close()
        if info[4] != '':
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ä—Ç–µ—Ç—å —Ç—Ä—ç–π–ª–ª–µ—Ä, —Ç–æ –≤–æ—Ç —Å—Å—ã–ª–∫–∞: " + info[4])
        bot.send_message(message.chat.id, "–ú–æ–≥—É –µ—â—ë —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?", reply_markup=gen_markup())


if __name__ == '__main__':
    bot.infinity_polling()
